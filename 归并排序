public static void mergeSort(int[] arr){
        if(arr == null || arr.length < 2){
            return;
        }
        process(arr,0,arr.length-1);
    }
    public static void process(int[] arr,int l,int r){
        if(l == r){
            return;
        }
        int mid = l + ((r - l) >> 1);
        process(arr,l,mid);
        process(arr,mid+1,r);
        merge(arr,l,r,mid);
    }

    private static void merge(int[] arr, int l, int r,int mid) {
        int[] help = new int[r - l + 1];
        int index = 0;
        int lIndex = l;
        int rIndex = mid + 1;
        while (lIndex <= mid && rIndex <= r){
            if(arr[lIndex] <= arr[rIndex]){
                help[index] = arr[lIndex];
                lIndex++;
            }else {
                help[index] = arr[rIndex];
                rIndex++;
            }
            index++;
        }

        while (lIndex <= mid){
            help[index] = arr[lIndex];
            lIndex++;
            index++;
        }


        while (rIndex <= r){
            help[index] = arr[rIndex];
            rIndex++;
            index++;
        }

        for (int i = 0;i<help.length;i++){
            arr[l + i] = help[i];
        }
    }
