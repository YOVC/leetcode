/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
//迭代+哈希表
    public Node copyRandomList(Node head) {
        //链表为空直接返回
        if(head == null){
            return null;
          }
        //存放新建链表节点信息，key为原链表节点，value为对应新节点
        Map<Node,Node> map = new HashMap<>();
        //哑节点
        Node dummy = head;
        //循环原链表
        while(dummy!=null){
            map.put(dummy,new Node(dummy.val));
            dummy = dummy.next;
        }
        dummy = head;
        //再次循环原链表
        while(dummy!=null){
            //根据dummy获取对应新节点
            Node node = map.get(dummy);
            //设置新节点的下一个节点，根据dummy.next从map中获取，random同理，如果next或者random为null，取到的值也为null
            node.next = map.get(dummy.next); 
            node.random = map.get(dummy.random);
            dummy = dummy.next;
        }
        //返回头节点
        return map.get(head);
        }
        
        
        //迭代+节点拆分
        public Node copyRandomList(Node head) {
        //链表为空直接返回
        if(head == null){
            return null;
          }
        
        //将原链表变为A->A`->B->B`->C->C`  其中A为原节点，A`为新节点
        Node dummy = head;
        while(dummy!=null){
            Node node = new Node(dummy.val);
            node.next = dummy.next;
            dummy.next = node;
            dummy = node.next;
        }

        //将新节点的随机指针指向对应新节点，新节点的随机指针指向即为原节点随机指针指向节点的下一个节点，注意考虑随机指针指向是否为空
        dummy = head;
        while(dummy!=null){
            if(dummy.random == null){
                dummy.next.random = null;
            }else{
                dummy.next.random = dummy.random.next;
            }
            dummy = dummy.next.next;
        }
        
        //还原原链表，分离出新链表
        dummy = head;
        Node newNode = dummy.next; //记录头指针，方便返回结果
        while(dummy!=null){
            Node node = dummy.next;
            dummy.next = node.next;
            if(node.next!=null){
                node.next = node.next.next;
            }
            dummy = dummy.next;
        }
        
        return newNode;
        }
}
