/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    int carry = 0;  //进位
    ListNode root = new ListNode();
    ListNode temp = root;
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        while(l1 != null || l2 != null || carry != 0){
            int val1= l1==null ? 0:l1.val;
            int val2= l2==null ? 0:l2.val;
            int result=val1+val2+carry;
            carry = result / 10;   //在java语言中，整数之间的除法运算，不管小数位有多少，小数是多少，统统舍弃，只返回整数位数字
            ListNode listNode = new ListNode(result%10);
            temp.next=listNode;
            temp=listNode;

            if(l1 != null){
                l1=l1.next;
            }
            if (l2 != null){
                l2=l2.next;
            }
        }
        return root.next;
    }
}
