/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode small = new ListNode(0);
        ListNode smallHead = small;
        ListNode large = new ListNode(0);
        ListNode largeHead = large;
        //大于x的连成一个链表，小于x的连成一个链表
        while(head != null){
            if(head.val < x){
                small.next = head;
                small = small.next;
            }else {
                large.next = head;
                large = large.next;
            }
            head = head.next;
        }
        //large.next原来指向的可能是原链表中的某个节点，所以至为null;
        large.next = null;
        small.next = largeHead.next;
        return smallHead.next;
    }


    public ListNode partition(ListNode head, int x) {
        if(head == null || head.next == null){
            return head;
        }
        //记录是否遇见比x大的节点，在未遇见这样的节点之前，每遍历一次，slow节点可直接向前移动，无需调换节点
        int flag = 1;
        ListNode slow = new ListNode(-1,head);
        ListNode dummy = new ListNode(-1,head);
        ListNode bigin = slow;//记录头节点，作为返回结果
        while(dummy.next != null){
            //如果dummy的下一个节点的值大于等于，那么直接跳过，并且标志变为0
            if(dummy.next.val >= x){
                dummy = dummy.next;
                flag = 0;
                continue;
            }

            //如果以上条件不满足，并且标志成立，则交换节点，交换节点后dummy不移动（因为交换节点后dummy的下一个节点已经改变），slow节点移动
            if(flag == 0){
                ListNode node = slow.next;
                slow.next = dummy.next;
                dummy.next = dummy.next.next;
                slow.next.next = node;
            }else{
                dummy = dummy.next;
            }
            
            slow = slow.next;
        }
        return bigin.next;
    }
}
